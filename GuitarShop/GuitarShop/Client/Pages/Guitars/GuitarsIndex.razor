@page "/guitars"
@inject HttpClient http
@inject IJSRuntime js

<h3>Guitars</h3>

<div>
    <a class="btn btn-success" href="guitars/create">Add Guitar</a>
</div>

@if (guitars == null)
{
    <text>Loading...</text>
}
else if (guitars.Length == 0)
{
    <text>There Are No Records in Database...</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var guitar in guitars)
            {
                <tr>
                    <td>
                        <a class="btn btn-success" href="guitars/edit/@guitar.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteGuitar(guitar.Id))">Delete</button>
                    </td>
                    <td>@guitar.Id</td>
                    <td>@guitar.Name</td>
                    <td>@guitar.Price $</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    Guitar[] guitars { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadGuitars();
    }

    async Task LoadGuitars()
    {
        guitars = await http.GetJsonAsync<Guitar[]>("api/guitars");
    }

    async Task DeleteGuitar(int guitarId)
    {
        var guitarSelected = guitars.First(x => x.Id == guitarId);

        if (await js.InvokeAsync<bool>("confirm", $"Do You Want To Delete {guitarSelected.Name}?")) 
        {
            await http.DeleteAsync($"api/guitars/{guitarId}");
            await LoadGuitars();
        }
    }
}
