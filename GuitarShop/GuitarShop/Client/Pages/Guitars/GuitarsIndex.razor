@page "/guitars"
@inject HttpClient http
@inject IJSRuntime js
@using System.IO
@using System.Text.Json

<h3 style="padding:30px" class="card-header-tabs">Guitars</h3>

@if (Session.Instance.User.Password == "admin")
{
    <div style="padding-bottom:10px" class="btn-holder">
        <a class="btn btn-success" href="guitars/create">Add Guitar</a>
    </div>
}
<div class="container">

    <div class="form-inline">
        <label class="sr-only" for="filter-name">
            Filter
        </label>
        <input type="text" class="form-control mb-2 mr-sm-2"
               @bind="nameFilter"
               placeholder="Filter by name" />
        <button type="button" class="btn btn-primary mb-2 mr-sm-2"
                @onclick="Filter">
            Filter
        </button>
        <button type="button" class="btn btn-danger mb-2"
                @onclick="Clear">
            Clear
        </button>
    </div>

    <Pagination TotalPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
                SelectedPage="SelectedPage"></Pagination>

    <GenericList Elements="guitars">
        <NullTemplate>
            <div>
                <img class="center" height="100" width="100" src="http://www.pzv.org.rs/obuke/images/loading.gif" />
            </div>
        </NullTemplate>

        <WithElementsTemplate>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var guitar in guitars)
                    {
                        <tr>
                            <td>@guitar.Id</td>
                            <td>@guitar.Name</td>
                            <td>@guitar.Price $</td>
                            <td>
                                @if (Session.Instance.User.Password == "admin")
                                {
                                    <a class="btn btn-success" href="guitars/edit/@guitar.Id">Edit</a>
                                    <button class="btn btn-danger" @onclick="@(()=>DeleteGuitar(guitar.Id))">Delete</button>

                                }
                                else
                                {
                                    <button class="btn btn-success" @onclick="@(()=>AddGuitarToBill(guitar.Id))">Add To Bill</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </WithElementsTemplate>
    </GenericList>

    <footer style="padding:20px" class="blockquote-footer">
        Copyright @@ Aleksa 2020
    </footer>

</div>

@code {
    List<Guitar> guitars { get; set; }
    private int totalPageQuantity;
    private int currentPage = 1;
    private string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadGuitars();
    }

    async Task LoadGuitars(int page = 1, int quantityPerPage = 5)
    {
        var httpResponse = await http.GetAsync($"api/guitars?page={page}&quantityPerPage={quantityPerPage}&name={nameFilter}");
        if (httpResponse.IsSuccessStatusCode)
        {
            totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            guitars = JsonSerializer.Deserialize<List<Guitar>>(responseString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
        }
    }

    private async Task Filter()
    {
        currentPage = 1;
        await LoadGuitars();
    }

    private async Task Clear()
    {
        nameFilter = string.Empty;
        currentPage = 1;
        await LoadGuitars();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadGuitars(page);
    }

    async Task DeleteGuitar(int guitarId)
    {
        var guitarSelected = guitars.First(x => x.Id == guitarId);
        if (await js.Confirm("", $"Do You Want To Delete {guitarSelected.Name}?", SweetAlertMessageType.warning))
        {
            await http.DeleteAsync($"api/guitars/{guitarId}");
            await LoadGuitars();
        }
    }

    private void AddGuitarToBill(int guitarId)
    {
        Guitar guitar = guitars.First(x => x.Id == guitarId);
        GuitarBillItem guitarBillItem = new GuitarBillItem()
        {
            Guitar = guitar
        };

        foreach (GuitarBillItem g in Session.Instance.Bill.GuitarItems)
        {
            if (g.Guitar.Id == guitarBillItem.Guitar.Id)
            {
                g.Number++;
                js.DisplayMassage("", $"{guitar.Name} Added Your Bill", SweetAlertMessageType.success);
                return;
            }
        }
        Session.Instance.Bill.GuitarItems.Add(guitarBillItem);
        js.DisplayMassage("", $"{guitar.Name} Added Your Bill", SweetAlertMessageType.success);
    }
}