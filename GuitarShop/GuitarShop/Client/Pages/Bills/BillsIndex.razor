@page "/bills"
@inject IJSRuntime js
@inject HttpClient http
@using System.IO
@using System.Text.Json

@if (Session.Instance.User.Password == "admin")
{
    <div>
        <GenericList Elements="Bills">
            <NullTemplate>
                <div>
                    <img class="center" height="100" width="100" src="http://www.pzv.org.rs/obuke/images/loading.gif" />
                </div>
            </NullTemplate>

            <EmptyTemplate>
                <div>
                    <label>There Are No Bills</label>
                </div>
            </EmptyTemplate>
            <WithElementsTemplate>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var guitarBill in Bills)
                            {
                            <tr>
                                <td>@guitarBill.Date</td>
                                <td>
                                    <button class="btn btn-success" @onclick="@(()=>View(guitarBill.Id))">View</button>             
                                </td>
                            </tr>
                            }
                        
                    </tbody>
                </table>
            </WithElementsTemplate>
        </GenericList>
    </div>
}
else
{
    <h1>Your Bill</h1>

    <GenericList Elements="Session.Instance.Bill.GuitarItems">
        <NullTemplate>
            <div>
                <img class="center" height="100" width="100" src="http://www.pzv.org.rs/obuke/images/loading.gif" />
            </div>
        </NullTemplate>

        <EmptyTemplate>
            <div>
                <label>Your Bill is Empty</label>
            </div>
        </EmptyTemplate>
        <WithElementsTemplate>

            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Amount</th>
                        <th></th>
                        <th></th>
                        <th>Total Price</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var guitar in Session.Instance.Bill.GuitarItems)
                        {
                        <tr>
                            <td>@guitar.Guitar.Name</td>
                            <td>@guitar.Guitar.Price $</td>
                            <td>@guitar.Number</td>
                            <td>
                                <button class="btn btn-success" @onclick="@(() => Increment(guitar.Guitar.Id))">+</button>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="@(() => Decrement(guitar.Guitar.Id))">-</button>
                            </td>
                            <td>@guitar.ItemPrice $</td>
                            <td>
                                <button class="btn btn-danger" @onclick="@(() => DeleteItem(guitar.Guitar.Id))">Remove</button>
                            </td>
                        </tr>
                        }
                </tbody>
            </table>
        </WithElementsTemplate>
    </GenericList>

    <div>
        <label>Total Bill Price: @Price $</label>
    </div>

    <EditForm Model="@User" OnValidSubmit="@Login">
        <div class="form-field">
            <label>First Name: </label>
            <div>
                <InputText @bind-Value="@User.FirstName"></InputText>
            </div>
        </div>
        <div class="form-field">
            <label>Last Name: </label>
            <div>
                <InputText @bind-Value="@User.LastName"></InputText>
            </div>
        </div>
        <div style="padding:5px">
            @*<button type="submit" class="btn btn-success">
                Done
            </button>*@
        </div>
    </EditForm>

    <div>
        <button class="btn btn-success" @onclick="@(() => Buy())">Buy</button>
    </div>

    <div class="btn-holder" style="padding-top:20px">
        <button class="btn btn-dark" style="padding:20px" @onclick="ExportAsCSV">Download Bill</button>
    </div>
}
@code {
    public User User { get; set; } = new User();
    public List<GuitarBill> Bills { get; set; }
    public string Price { get; set; } = Session.Instance.Bill.GetFormattedTotalPrice();
    public GuitarBill Bill { get; set; } = Session.Instance.Bill;
    public List<GuitarBillItem> guitarsInBill { get; set; } = Session.Instance.Bill.GuitarItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadBills();
    }

    async Task LoadBills()
    {
        Bills = await http.GetJsonAsync<List<GuitarBill>>($"api/bill");
    }

    private void Login()
    {
        js.DisplayMassage("", $"Name Saved!", SweetAlertMessageType.success);
    }

    async Task View(int GuitarBillId)
    {
        GuitarBill bill = await http.GetJsonAsync<GuitarBill>($"api/bill/{GuitarBillId}");
        List<GuitarBillItem> items = bill.GuitarItems; 
        await js.DisplayMassage("Bill Id: "+bill.Id, $"Ovde idu sve gitare" + items[0], SweetAlertMessageType.info);
        return;
    }

    async Task Buy()
    {
        if (User.FirstName == null || User.LastName == null || User.FirstName == "" || User.LastName == "")
        {
            await js.DisplayMassage("", $"Please Provide Us With Your First and Last Name!", SweetAlertMessageType.error);
            return;
        }
        if (Session.Instance.Bill.GuitarItems.Count == 0)
        {
            await js.DisplayMassage("", $"Your Bill Is Empty!", SweetAlertMessageType.error);
            return;
        }

        Session.Instance.Bill.DatumTest = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
        Session.Instance.Bill.User = User;
        await http.PostJsonAsync("api/bill", Session.Instance.Bill);
        Session.Instance.Bill.GuitarItems.Clear();
        Price = Session.Instance.Bill.GetFormattedTotalPrice();
        await js.DisplayMassage("", $"Thank You For Your Purchase {User.FirstName} {User.LastName}!", SweetAlertMessageType.success);
        User.FirstName = "";
        User.LastName = "";
    }

    private void Increment(int guitarId)
    {
        foreach (GuitarBillItem g in Session.Instance.Bill.GuitarItems)
        {
            if (g.Guitar.Id == guitarId)
            {
                g.Number++;
                Price = Session.Instance.Bill.GetFormattedTotalPrice();
                return;
            }
        }
    }

    private void Decrement(int guitarId)
    {
        foreach (GuitarBillItem g in Session.Instance.Bill.GuitarItems)
        {
            if (g.Guitar.Id == guitarId)
            {
                if (g.Number == 1)
                    //DeleteItem(guitarId);
                    return;
                g.Number--;
                Price = Session.Instance.Bill.GetFormattedTotalPrice();
                return;
            }
        }
    }

    private void DeleteItem(int guitarId)
    {
        foreach (GuitarBillItem g in Session.Instance.Bill.GuitarItems)
        {
            if (g.Guitar.Id == guitarId)
            {
                Session.Instance.Bill.GuitarItems.Remove(g);
                Price = Session.Instance.Bill.GetFormattedTotalPrice();
                return;
            }
        }
    }

    private void ExportAsCSV()
    {
        if (Session.Instance.Bill.GuitarItems.Count == 0)
        {
            js.DisplayMassage("", $"Your Bill Is Empty!", SweetAlertMessageType.error);
            return;
        }

        List<Guitar> guitars = new List<Guitar>();
        foreach (var guitarBillItem in Session.Instance.Bill.GuitarItems)
        {
            if (guitarBillItem.Number == 1)
            {
                guitars.Add(guitarBillItem.Guitar);
            }
            else
            {
                int k = 1;
                while (k <= guitarBillItem.Number)
                {
                    guitars.Add(guitarBillItem.Guitar);
                    k++;
                }
            }
        }
        using (var memoryStream = new MemoryStream())
        {
            using (var writer = new StreamWriter(memoryStream))
            {
                using (var csv = new CsvHelper.CsvWriter(writer))
                {
                    foreach (var guitar in guitars)
                    {
                        csv.WriteRecord(guitar);
                        csv.NextRecord();
                    }
                }
                var arr = memoryStream.ToArray();
                js.SaveAs("guitars.csv", arr);
            }
        }
    }
}